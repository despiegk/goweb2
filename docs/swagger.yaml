basePath: /api/v1
definitions:
  model.Issue:
    properties:
      actual_hours:
        type: number
      assignees:
        items:
          type: string
        type: array
      category:
        $ref: '#/definitions/model.IssueCategory'
      dependencies:
        items:
          type: string
        type: array
      description:
        type: string
      due_date:
        type: string
      end_time:
        type: string
      estimated_hours:
        type: number
      labels:
        items:
          type: string
        type: array
      priority:
        $ref: '#/definitions/model.IssuePriority'
      project_id:
        type: string
      severity:
        $ref: '#/definitions/model.IssueSeverity'
      start_time:
        type: string
      status:
        $ref: '#/definitions/model.IssueStatus'
      time_entries:
        items:
          $ref: '#/definitions/model.TimeEntry'
        type: array
      title:
        type: string
      total_time_spent:
        type: number
    required:
    - category
    - priority
    - severity
    - status
    type: object
  model.IssueCategory:
    enum:
    - task
    - story
    - question
    - bug
    - crm
    type: string
    x-enum-varnames:
    - TaskCategory
    - StoryCategory
    - QuestionCategory
    - BugCategory
    - CRMCategory
  model.IssuePriority:
    enum:
    - low
    - medium
    - high
    - critical
    type: string
    x-enum-varnames:
    - LowPriority
    - MediumPriority
    - HighPriority
    - CriticalPriority
  model.IssueSeverity:
    enum:
    - normal
    - high
    - serious
    - disaster
    type: string
    x-enum-varnames:
    - NormalSeverity
    - HighSeverity
    - SeriousSeverity
    - DisasterSeverity
  model.IssueStatus:
    enum:
    - new_status
    - todo
    - in_progress
    - completed
    - question
    - blocked
    - verified
    type: string
    x-enum-varnames:
    - NewStatus
    - TodoStatus
    - InProgress
    - Completed
    - QuestionStatus
    - BlockedStatus
    - VerifiedStatus
  model.TimeEntry:
    properties:
      description:
        type: string
      end_time:
        type: string
      start_time:
        type: string
      time_spent:
        type: number
      user_id:
        type: string
    type: object
host: localhost:8081
info:
  contact: {}
  description: A RESTful web service for issue tracking management
  title: GoWeb2 Issue Tracking API
  version: "1.0"
paths:
  /issues:
    get:
      consumes:
      - application/json
      description: Get a list of all issues
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Issue'
            type: array
      summary: Get all issues
      tags:
      - issues
    post:
      consumes:
      - application/json
      description: Create a new issue with the provided information
      parameters:
      - description: Issue object
        in: body
        name: issue
        required: true
        schema:
          $ref: '#/definitions/model.Issue'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Issue'
      summary: Create a new issue
      tags:
      - issues
  /issues/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an issue by ID
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete an issue
      tags:
      - issues
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific issue
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Issue'
      summary: Get an issue by ID
      tags:
      - issues
    put:
      consumes:
      - application/json
      description: Update an existing issue with new information
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: string
      - description: Issue object
        in: body
        name: issue
        required: true
        schema:
          $ref: '#/definitions/model.Issue'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Issue'
      summary: Update an issue
      tags:
      - issues
  /issues/{id}/time:
    post:
      consumes:
      - application/json
      description: Add a new time entry to an existing issue
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: string
      - description: Time Entry object
        in: body
        name: timeEntry
        required: true
        schema:
          $ref: '#/definitions/model.TimeEntry'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.TimeEntry'
      summary: Add time entry to an issue
      tags:
      - issues
swagger: "2.0"
