// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	chi "github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for IssueCategory.
const (
	IssueCategoryBug      IssueCategory = "bug"
	IssueCategoryCrm      IssueCategory = "crm"
	IssueCategoryQuestion IssueCategory = "question"
	IssueCategoryStory    IssueCategory = "story"
	IssueCategoryTask     IssueCategory = "task"
)

// Defines values for IssuePriority.
const (
	IssuePriorityCritical IssuePriority = "critical"
	IssuePriorityHigh     IssuePriority = "high"
	IssuePriorityLow      IssuePriority = "low"
	IssuePriorityMedium   IssuePriority = "medium"
)

// Defines values for IssueSeverity.
const (
	IssueSeverityDisaster IssueSeverity = "disaster"
	IssueSeverityHigh     IssueSeverity = "high"
	IssueSeverityNormal   IssueSeverity = "normal"
	IssueSeveritySerious  IssueSeverity = "serious"
)

// Defines values for IssueStatus.
const (
	IssueStatusBlocked    IssueStatus = "blocked"
	IssueStatusCompleted  IssueStatus = "completed"
	IssueStatusInProgress IssueStatus = "in_progress"
	IssueStatusNewStatus  IssueStatus = "new_status"
	IssueStatusQuestion   IssueStatus = "question"
	IssueStatusTodo       IssueStatus = "todo"
	IssueStatusVerified   IssueStatus = "verified"
)

// Issue defines model for Issue.
type Issue struct {
	ActualHours    *float64      `json:"actual_hours"`
	Assignees      *[]string     `json:"assignees,omitempty"`
	Category       IssueCategory `json:"category"`
	Dependencies   *[]string     `json:"dependencies,omitempty"`
	Description    string        `json:"description"`
	DueDate        *time.Time    `json:"due_date,omitempty"`
	EndTime        *time.Time    `json:"end_time,omitempty"`
	EstimatedHours *float64      `json:"estimated_hours"`
	Labels         *[]string     `json:"labels,omitempty"`
	Priority       IssuePriority `json:"priority"`
	ProjectId      string        `json:"project_id"`
	Severity       IssueSeverity `json:"severity"`
	StartTime      *time.Time    `json:"start_time,omitempty"`
	Status         IssueStatus   `json:"status"`
	TimeEntries    *[]TimeEntry  `json:"time_entries,omitempty"`
	Title          string        `json:"title"`

	// TotalTimeSpent Total time spent in hours
	TotalTimeSpent *float64 `json:"total_time_spent,omitempty"`
}

// IssueCategory defines model for Issue.Category.
type IssueCategory string

// IssuePriority defines model for Issue.Priority.
type IssuePriority string

// IssueSeverity defines model for Issue.Severity.
type IssueSeverity string

// IssueStatus defines model for Issue.Status.
type IssueStatus string

// TimeEntry defines model for TimeEntry.
type TimeEntry struct {
	Description string     `json:"description"`
	EndTime     *time.Time `json:"end_time"`
	StartTime   time.Time  `json:"start_time"`

	// TimeSpent Time spent in hours
	TimeSpent float64 `json:"time_spent"`
	UserId    string  `json:"user_id"`
}

// CreateIssueJSONRequestBody defines body for CreateIssue for application/json ContentType.
type CreateIssueJSONRequestBody = Issue

// UpdateIssueJSONRequestBody defines body for UpdateIssue for application/json ContentType.
type UpdateIssueJSONRequestBody = Issue

// AddTimeEntryJSONRequestBody defines body for AddTimeEntry for application/json ContentType.
type AddTimeEntryJSONRequestBody = TimeEntry

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all issues
	// (GET /issues)
	ListIssues(w http.ResponseWriter, r *http.Request)
	// Create a new issue
	// (POST /issues)
	CreateIssue(w http.ResponseWriter, r *http.Request)
	// Delete an issue
	// (DELETE /issues/{id})
	DeleteIssue(w http.ResponseWriter, r *http.Request, id string)
	// Get an issue by ID
	// (GET /issues/{id})
	GetIssue(w http.ResponseWriter, r *http.Request, id string)
	// Update an issue
	// (PUT /issues/{id})
	UpdateIssue(w http.ResponseWriter, r *http.Request, id string)
	// Add time entry to an issue
	// (POST /issues/{id}/time)
	AddTimeEntry(w http.ResponseWriter, r *http.Request, id string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all issues
// (GET /issues)
func (_ Unimplemented) ListIssues(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new issue
// (POST /issues)
func (_ Unimplemented) CreateIssue(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an issue
// (DELETE /issues/{id})
func (_ Unimplemented) DeleteIssue(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get an issue by ID
// (GET /issues/{id})
func (_ Unimplemented) GetIssue(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an issue
// (PUT /issues/{id})
func (_ Unimplemented) UpdateIssue(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add time entry to an issue
// (POST /issues/{id}/time)
func (_ Unimplemented) AddTimeEntry(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListIssues operation middleware
func (siw *ServerInterfaceWrapper) ListIssues(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListIssues(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateIssue operation middleware
func (siw *ServerInterfaceWrapper) CreateIssue(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateIssue(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteIssue operation middleware
func (siw *ServerInterfaceWrapper) DeleteIssue(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteIssue(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetIssue operation middleware
func (siw *ServerInterfaceWrapper) GetIssue(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIssue(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateIssue operation middleware
func (siw *ServerInterfaceWrapper) UpdateIssue(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateIssue(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddTimeEntry operation middleware
func (siw *ServerInterfaceWrapper) AddTimeEntry(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddTimeEntry(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/issues", wrapper.ListIssues)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/issues", wrapper.CreateIssue)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/issues/{id}", wrapper.DeleteIssue)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/issues/{id}", wrapper.GetIssue)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/issues/{id}", wrapper.UpdateIssue)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/issues/{id}/time", wrapper.AddTimeEntry)
	})

	return r
}

type ListIssuesRequestObject struct {
}

type ListIssuesResponseObject interface {
	VisitListIssuesResponse(w http.ResponseWriter) error
}

type ListIssues200JSONResponse []Issue

func (response ListIssues200JSONResponse) VisitListIssuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateIssueRequestObject struct {
	Body *CreateIssueJSONRequestBody
}

type CreateIssueResponseObject interface {
	VisitCreateIssueResponse(w http.ResponseWriter) error
}

type CreateIssue201JSONResponse Issue

func (response CreateIssue201JSONResponse) VisitCreateIssueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateIssue400Response struct {
}

func (response CreateIssue400Response) VisitCreateIssueResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteIssueRequestObject struct {
	Id string `json:"id"`
}

type DeleteIssueResponseObject interface {
	VisitDeleteIssueResponse(w http.ResponseWriter) error
}

type DeleteIssue204Response struct {
}

func (response DeleteIssue204Response) VisitDeleteIssueResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIssue404Response struct {
}

func (response DeleteIssue404Response) VisitDeleteIssueResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetIssueRequestObject struct {
	Id string `json:"id"`
}

type GetIssueResponseObject interface {
	VisitGetIssueResponse(w http.ResponseWriter) error
}

type GetIssue200JSONResponse Issue

func (response GetIssue200JSONResponse) VisitGetIssueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIssue404Response struct {
}

func (response GetIssue404Response) VisitGetIssueResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateIssueRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateIssueJSONRequestBody
}

type UpdateIssueResponseObject interface {
	VisitUpdateIssueResponse(w http.ResponseWriter) error
}

type UpdateIssue200JSONResponse Issue

func (response UpdateIssue200JSONResponse) VisitUpdateIssueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIssue400Response struct {
}

func (response UpdateIssue400Response) VisitUpdateIssueResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdateIssue404Response struct {
}

func (response UpdateIssue404Response) VisitUpdateIssueResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AddTimeEntryRequestObject struct {
	Id   string `json:"id"`
	Body *AddTimeEntryJSONRequestBody
}

type AddTimeEntryResponseObject interface {
	VisitAddTimeEntryResponse(w http.ResponseWriter) error
}

type AddTimeEntry201JSONResponse TimeEntry

func (response AddTimeEntry201JSONResponse) VisitAddTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddTimeEntry400Response struct {
}

func (response AddTimeEntry400Response) VisitAddTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AddTimeEntry404Response struct {
}

func (response AddTimeEntry404Response) VisitAddTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all issues
	// (GET /issues)
	ListIssues(ctx context.Context, request ListIssuesRequestObject) (ListIssuesResponseObject, error)
	// Create a new issue
	// (POST /issues)
	CreateIssue(ctx context.Context, request CreateIssueRequestObject) (CreateIssueResponseObject, error)
	// Delete an issue
	// (DELETE /issues/{id})
	DeleteIssue(ctx context.Context, request DeleteIssueRequestObject) (DeleteIssueResponseObject, error)
	// Get an issue by ID
	// (GET /issues/{id})
	GetIssue(ctx context.Context, request GetIssueRequestObject) (GetIssueResponseObject, error)
	// Update an issue
	// (PUT /issues/{id})
	UpdateIssue(ctx context.Context, request UpdateIssueRequestObject) (UpdateIssueResponseObject, error)
	// Add time entry to an issue
	// (POST /issues/{id}/time)
	AddTimeEntry(ctx context.Context, request AddTimeEntryRequestObject) (AddTimeEntryResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListIssues operation middleware
func (sh *strictHandler) ListIssues(w http.ResponseWriter, r *http.Request) {
	var request ListIssuesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListIssues(ctx, request.(ListIssuesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListIssues")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListIssuesResponseObject); ok {
		if err := validResponse.VisitListIssuesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIssue operation middleware
func (sh *strictHandler) CreateIssue(w http.ResponseWriter, r *http.Request) {
	var request CreateIssueRequestObject

	var body CreateIssueJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIssue(ctx, request.(CreateIssueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIssue")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateIssueResponseObject); ok {
		if err := validResponse.VisitCreateIssueResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIssue operation middleware
func (sh *strictHandler) DeleteIssue(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteIssueRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIssue(ctx, request.(DeleteIssueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIssue")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteIssueResponseObject); ok {
		if err := validResponse.VisitDeleteIssueResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIssue operation middleware
func (sh *strictHandler) GetIssue(w http.ResponseWriter, r *http.Request, id string) {
	var request GetIssueRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetIssue(ctx, request.(GetIssueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIssue")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetIssueResponseObject); ok {
		if err := validResponse.VisitGetIssueResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateIssue operation middleware
func (sh *strictHandler) UpdateIssue(w http.ResponseWriter, r *http.Request, id string) {
	var request UpdateIssueRequestObject

	request.Id = id

	var body UpdateIssueJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateIssue(ctx, request.(UpdateIssueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateIssue")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateIssueResponseObject); ok {
		if err := validResponse.VisitUpdateIssueResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddTimeEntry operation middleware
func (sh *strictHandler) AddTimeEntry(w http.ResponseWriter, r *http.Request, id string) {
	var request AddTimeEntryRequestObject

	request.Id = id

	var body AddTimeEntryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddTimeEntry(ctx, request.(AddTimeEntryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddTimeEntry")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddTimeEntryResponseObject); ok {
		if err := validResponse.VisitAddTimeEntryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWT28btxP9KgR/v+M2ktMcgr25TWAYyKFoXPQQGAK1HEkTc0mGHMoVDH33YsiVtdpd",
	"J7YDGz2J4g7n33tvyDvZuNY7C5airO9kbDbQqry8jDEBL3xwHgIh5G3VUFJmsXEp5P8rF1pFspbapaUB",
	"WUmbjFG8rCkkqCTtPMha2tQuIch9JVWMuLZQ/CFBmxedWaSAds1m3YYKQe34f6MI1i7s2FjDSiXDYUnF",
	"G1lJsKmV9ZfD30hsWMlvCSKhs7KSy7SWlWxCK6+rcTANHqwG2+BT09IQm4A+R5my1wkWWhGcNksR/ELY",
	"cr9GJ8DqRf72+BORsFUE+qdwMWoJ5onV+4AuIA1AaUFjanuwGHcrq+P2BtebDAYSNspMIuKD+woNLVBP",
	"JhJhC+PAlqs2vcD3G13ICAFdirKSGqOKBGEyeCQV6IkgRFKU4oCdTrt+NnC76Myqwze0Cx/cOkDkTZaj",
	"AQI9IK9xzU3e5KpXCHoybU5tAZbCkMX/D7CStfzf7Cj3Waf12RW28NFS2E3hS0gGppngSJncokX0YKkU",
	"3tOCvGILwRYiWwi0ovCzmqDngI77Sgb4ljCAzrrOeZyqrTcS7rvfY2SPIydsOjbOLXmPizn2YDTwfqTv",
	"H6r1Ad39HNm+2/fndbySKUKY1tsAjV7GQ0h6iR0djlvOHtGu3Dj7c/Hnx89Xq2TELSxFhLDFBsTKBYF8",
	"IwkKqrlBuxatsmoNbYnU8VReuL9h+Vbky0tcHUzP/7gs0oklxtmbOdfrPFjlUdby1zfzN2dME0WbjPos",
	"B8vLNUz0+AJIKGEwknAroYwR3YHsNSg2u9Sylp8w0uXhU4DonY3F79v5nH8aZ6mDUXlvsMlnZ19j4VtR",
	"6aPFXG7tkZD3w4tKfk5NAzFyn+8TzjjH1LaKhVBqPFbGM9nFiV78HkARCCUs3HYg3SJtBG1A+OC2qEEL",
	"BpsJWFhy2qPioKReiAaRfnN696T+PKItpzxmOe5HoJy9RNDThhV2NrlqLeI9EiaP3HeFF4MjdqsMcht9",
	"ogFO4/5ng47CszvU++KQL5ax6w95XyjbYbfcicsPI4yK1RGjk569m0g4+yoxp2p88Ih1JFYuWT2ocpAm",
	"e3lQmRpIoTllnVBLl1i00UODK2w6P8NCL4AeqHL+8syYVuWz+pXVe4opK1gF1QIBPxK/3ElkPzz0+J5S",
	"fAFJ1HIokqpX1vBiuK4kM3KU3F9eqwIX/IOReAr3RkNm6ncmQjn9H5kI89eaCClX/byJ8CyOHEGaHhuz",
	"w6PkRWgzeZmca91Nsvxw5MfsTpAbE2nEmXOtj8+4lyFN76n8ulfJIPDEe680Smn9mvxhsEYw4ZHk/Ho7",
	"cObU7yfXKCM0bME4z284UWz50RiMrOWGyNezmWG7jYtUv5+/P5spj7Ptmdxf7/8NAAD//4GRJ+a6EAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
