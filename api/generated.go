// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// Defines values for IssueCategory.
const (
	IssueCategoryBug      IssueCategory = "bug"
	IssueCategoryCrm      IssueCategory = "crm"
	IssueCategoryQuestion IssueCategory = "question"
	IssueCategoryStory    IssueCategory = "story"
	IssueCategoryTask     IssueCategory = "task"
)

// Defines values for IssuePriority.
const (
	IssuePriorityCritical IssuePriority = "critical"
	IssuePriorityHigh     IssuePriority = "high"
	IssuePriorityLow      IssuePriority = "low"
	IssuePriorityMedium   IssuePriority = "medium"
)

// Defines values for IssueSeverity.
const (
	IssueSeverityDisaster IssueSeverity = "disaster"
	IssueSeverityHigh     IssueSeverity = "high"
	IssueSeverityNormal   IssueSeverity = "normal"
	IssueSeveritySerious  IssueSeverity = "serious"
)

// Defines values for IssueStatus.
const (
	IssueStatusBlocked    IssueStatus = "blocked"
	IssueStatusCompleted  IssueStatus = "completed"
	IssueStatusInProgress IssueStatus = "in_progress"
	IssueStatusNewStatus  IssueStatus = "new_status"
	IssueStatusQuestion   IssueStatus = "question"
	IssueStatusTodo       IssueStatus = "todo"
	IssueStatusVerified   IssueStatus = "verified"
)

// Issue defines model for Issue.
type Issue struct {
	ActualHours    *float64      `json:"actual_hours"`
	Assignees      *[]string     `json:"assignees,omitempty"`
	Category       IssueCategory `json:"category"`
	Dependencies   *[]string     `json:"dependencies,omitempty"`
	Description    string        `json:"description"`
	DueDate        *time.Time    `json:"due_date,omitempty"`
	EndTime        *time.Time    `json:"end_time,omitempty"`
	EstimatedHours *float64      `json:"estimated_hours"`
	Labels         *[]string     `json:"labels,omitempty"`
	Priority       IssuePriority `json:"priority"`
	ProjectId      string        `json:"project_id"`
	Severity       IssueSeverity `json:"severity"`
	StartTime      *time.Time    `json:"start_time,omitempty"`
	Status         IssueStatus   `json:"status"`
	TimeEntries    *[]TimeEntry  `json:"time_entries,omitempty"`
	Title          string        `json:"title"`

	// Total time spent in hours
	TotalTimeSpent *float64 `json:"total_time_spent,omitempty"`
}

// IssueCategory defines model for Issue.Category.
type IssueCategory string

// IssuePriority defines model for Issue.Priority.
type IssuePriority string

// IssueSeverity defines model for Issue.Severity.
type IssueSeverity string

// IssueStatus defines model for Issue.Status.
type IssueStatus string

// TimeEntry defines model for TimeEntry.
type TimeEntry struct {
	Description string     `json:"description"`
	EndTime     *time.Time `json:"end_time"`
	StartTime   time.Time  `json:"start_time"`

	// Time spent in hours
	TimeSpent float64 `json:"time_spent"`
	UserId    string  `json:"user_id"`
}

// CreateIssueJSONBody defines parameters for CreateIssue.
type CreateIssueJSONBody = Issue

// UpdateIssueJSONBody defines parameters for UpdateIssue.
type UpdateIssueJSONBody = Issue

// AddTimeEntryJSONBody defines parameters for AddTimeEntry.
type AddTimeEntryJSONBody = TimeEntry

// CreateIssueJSONRequestBody defines body for CreateIssue for application/json ContentType.
type CreateIssueJSONRequestBody = CreateIssueJSONBody

// UpdateIssueJSONRequestBody defines body for UpdateIssue for application/json ContentType.
type UpdateIssueJSONRequestBody = UpdateIssueJSONBody

// AddTimeEntryJSONRequestBody defines body for AddTimeEntry for application/json ContentType.
type AddTimeEntryJSONRequestBody = AddTimeEntryJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListIssues request
	ListIssues(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIssue request with any body
	CreateIssueWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIssue(ctx context.Context, body CreateIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIssue request
	DeleteIssue(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIssue request
	GetIssue(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIssue request with any body
	UpdateIssueWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIssue(ctx context.Context, id string, body UpdateIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddTimeEntry request with any body
	AddTimeEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddTimeEntry(ctx context.Context, id string, body AddTimeEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListIssues(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIssuesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIssueWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIssueRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIssue(ctx context.Context, body CreateIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIssueRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIssue(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIssueRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIssue(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIssueRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIssueWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIssueRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIssue(ctx context.Context, id string, body UpdateIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIssueRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTimeEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTimeEntryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTimeEntry(ctx context.Context, id string, body AddTimeEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTimeEntryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListIssuesRequest generates requests for ListIssues
func NewListIssuesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/issues")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIssueRequest calls the generic CreateIssue builder with application/json body
func NewCreateIssueRequest(server string, body CreateIssueJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIssueRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIssueRequestWithBody generates requests for CreateIssue with any type of body
func NewCreateIssueRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/issues")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIssueRequest generates requests for DeleteIssue
func NewDeleteIssueRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/issues/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIssueRequest generates requests for GetIssue
func NewGetIssueRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/issues/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIssueRequest calls the generic UpdateIssue builder with application/json body
func NewUpdateIssueRequest(server string, id string, body UpdateIssueJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIssueRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateIssueRequestWithBody generates requests for UpdateIssue with any type of body
func NewUpdateIssueRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/issues/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddTimeEntryRequest calls the generic AddTimeEntry builder with application/json body
func NewAddTimeEntryRequest(server string, id string, body AddTimeEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddTimeEntryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddTimeEntryRequestWithBody generates requests for AddTimeEntry with any type of body
func NewAddTimeEntryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/issues/%s/time", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListIssues request
	ListIssuesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListIssuesResponse, error)

	// CreateIssue request with any body
	CreateIssueWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIssueResponse, error)

	CreateIssueWithResponse(ctx context.Context, body CreateIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIssueResponse, error)

	// DeleteIssue request
	DeleteIssueWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIssueResponse, error)

	// GetIssue request
	GetIssueWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIssueResponse, error)

	// UpdateIssue request with any body
	UpdateIssueWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIssueResponse, error)

	UpdateIssueWithResponse(ctx context.Context, id string, body UpdateIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIssueResponse, error)

	// AddTimeEntry request with any body
	AddTimeEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTimeEntryResponse, error)

	AddTimeEntryWithResponse(ctx context.Context, id string, body AddTimeEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTimeEntryResponse, error)
}

type ListIssuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Issue
}

// Status returns HTTPResponse.Status
func (r ListIssuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIssuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIssueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Issue
}

// Status returns HTTPResponse.Status
func (r CreateIssueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIssueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIssueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIssueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIssueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIssueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Issue
}

// Status returns HTTPResponse.Status
func (r GetIssueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIssueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIssueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Issue
}

// Status returns HTTPResponse.Status
func (r UpdateIssueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIssueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddTimeEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TimeEntry
}

// Status returns HTTPResponse.Status
func (r AddTimeEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddTimeEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListIssuesWithResponse request returning *ListIssuesResponse
func (c *ClientWithResponses) ListIssuesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListIssuesResponse, error) {
	rsp, err := c.ListIssues(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIssuesResponse(rsp)
}

// CreateIssueWithBodyWithResponse request with arbitrary body returning *CreateIssueResponse
func (c *ClientWithResponses) CreateIssueWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIssueResponse, error) {
	rsp, err := c.CreateIssueWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIssueResponse(rsp)
}

func (c *ClientWithResponses) CreateIssueWithResponse(ctx context.Context, body CreateIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIssueResponse, error) {
	rsp, err := c.CreateIssue(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIssueResponse(rsp)
}

// DeleteIssueWithResponse request returning *DeleteIssueResponse
func (c *ClientWithResponses) DeleteIssueWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIssueResponse, error) {
	rsp, err := c.DeleteIssue(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIssueResponse(rsp)
}

// GetIssueWithResponse request returning *GetIssueResponse
func (c *ClientWithResponses) GetIssueWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetIssueResponse, error) {
	rsp, err := c.GetIssue(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIssueResponse(rsp)
}

// UpdateIssueWithBodyWithResponse request with arbitrary body returning *UpdateIssueResponse
func (c *ClientWithResponses) UpdateIssueWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIssueResponse, error) {
	rsp, err := c.UpdateIssueWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIssueResponse(rsp)
}

func (c *ClientWithResponses) UpdateIssueWithResponse(ctx context.Context, id string, body UpdateIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIssueResponse, error) {
	rsp, err := c.UpdateIssue(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIssueResponse(rsp)
}

// AddTimeEntryWithBodyWithResponse request with arbitrary body returning *AddTimeEntryResponse
func (c *ClientWithResponses) AddTimeEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTimeEntryResponse, error) {
	rsp, err := c.AddTimeEntryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTimeEntryResponse(rsp)
}

func (c *ClientWithResponses) AddTimeEntryWithResponse(ctx context.Context, id string, body AddTimeEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTimeEntryResponse, error) {
	rsp, err := c.AddTimeEntry(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTimeEntryResponse(rsp)
}

// ParseListIssuesResponse parses an HTTP response from a ListIssuesWithResponse call
func ParseListIssuesResponse(rsp *http.Response) (*ListIssuesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIssuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Issue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateIssueResponse parses an HTTP response from a CreateIssueWithResponse call
func ParseCreateIssueResponse(rsp *http.Response) (*CreateIssueResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIssueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Issue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteIssueResponse parses an HTTP response from a DeleteIssueWithResponse call
func ParseDeleteIssueResponse(rsp *http.Response) (*DeleteIssueResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIssueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIssueResponse parses an HTTP response from a GetIssueWithResponse call
func ParseGetIssueResponse(rsp *http.Response) (*GetIssueResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIssueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Issue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateIssueResponse parses an HTTP response from a UpdateIssueWithResponse call
func ParseUpdateIssueResponse(rsp *http.Response) (*UpdateIssueResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIssueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Issue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddTimeEntryResponse parses an HTTP response from a AddTimeEntryWithResponse call
func ParseAddTimeEntryResponse(rsp *http.Response) (*AddTimeEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddTimeEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TimeEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all issues
	// (GET /issues)
	ListIssues(ctx echo.Context) error
	// Create a new issue
	// (POST /issues)
	CreateIssue(ctx echo.Context) error
	// Delete an issue
	// (DELETE /issues/{id})
	DeleteIssue(ctx echo.Context, id string) error
	// Get an issue by ID
	// (GET /issues/{id})
	GetIssue(ctx echo.Context, id string) error
	// Update an issue
	// (PUT /issues/{id})
	UpdateIssue(ctx echo.Context, id string) error
	// Add time entry to an issue
	// (POST /issues/{id}/time)
	AddTimeEntry(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListIssues converts echo context to params.
func (w *ServerInterfaceWrapper) ListIssues(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIssues(ctx)
	return err
}

// CreateIssue converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIssue(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIssue(ctx)
	return err
}

// DeleteIssue converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIssue(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIssue(ctx, id)
	return err
}

// GetIssue converts echo context to params.
func (w *ServerInterfaceWrapper) GetIssue(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIssue(ctx, id)
	return err
}

// UpdateIssue converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIssue(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIssue(ctx, id)
	return err
}

// AddTimeEntry converts echo context to params.
func (w *ServerInterfaceWrapper) AddTimeEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddTimeEntry(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/issues", wrapper.ListIssues)
	router.POST(baseURL+"/issues", wrapper.CreateIssue)
	router.DELETE(baseURL+"/issues/:id", wrapper.DeleteIssue)
	router.GET(baseURL+"/issues/:id", wrapper.GetIssue)
	router.PUT(baseURL+"/issues/:id", wrapper.UpdateIssue)
	router.POST(baseURL+"/issues/:id/time", wrapper.AddTimeEntry)

}
